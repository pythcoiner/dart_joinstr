// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/joinstr.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiJoinstrInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => -162717660;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'dart_joinstr',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<DAddress?> crateApiJoinstrDAddressFromString({required String value});

  Future<double> crateApiJoinstrDCoinAmountBtc({required DCoin that});

  Future<BigInt> crateApiJoinstrDCoinAmountSat({required DCoin that});

  Future<String> crateApiJoinstrDCoinOutpoint({required DCoin that});

  Future<DMnemonic?> crateApiJoinstrDMnemonicFromString({
    required String value,
  });

  int crateApiJoinstrDPeerConfigAutoAccessorGetElectrumPort({
    required DPeerConfig that,
  });

  String crateApiJoinstrDPeerConfigAutoAccessorGetElectrumUrl({
    required DPeerConfig that,
  });

  DCoin crateApiJoinstrDPeerConfigAutoAccessorGetInput({
    required DPeerConfig that,
  });

  DMnemonic crateApiJoinstrDPeerConfigAutoAccessorGetMnemonics({
    required DPeerConfig that,
  });

  DAddress crateApiJoinstrDPeerConfigAutoAccessorGetOutput({
    required DPeerConfig that,
  });

  String crateApiJoinstrDPeerConfigAutoAccessorGetRelay({
    required DPeerConfig that,
  });

  void crateApiJoinstrDPeerConfigAutoAccessorSetElectrumPort({
    required DPeerConfig that,
    required int electrumPort,
  });

  void crateApiJoinstrDPeerConfigAutoAccessorSetElectrumUrl({
    required DPeerConfig that,
    required String electrumUrl,
  });

  void crateApiJoinstrDPeerConfigAutoAccessorSetInput({
    required DPeerConfig that,
    required DCoin input,
  });

  void crateApiJoinstrDPeerConfigAutoAccessorSetMnemonics({
    required DPeerConfig that,
    required DMnemonic mnemonics,
  });

  void crateApiJoinstrDPeerConfigAutoAccessorSetOutput({
    required DPeerConfig that,
    required DAddress output,
  });

  void crateApiJoinstrDPeerConfigAutoAccessorSetRelay({
    required DPeerConfig that,
    required String relay,
  });

  Future<double?> crateApiJoinstrDPoolDenominationBtc({required DPool that});

  Future<BigInt?> crateApiJoinstrDPoolDenominationSat({required DPool that});

  Future<int?> crateApiJoinstrDPoolFee({required DPool that});

  Future<BigInt?> crateApiJoinstrDPoolPeers({required DPool that});

  Future<String?> crateApiJoinstrDPoolRelay({required DPool that});

  Future<bool> crateApiJoinstrCoinjoinResultIsError({
    required CoinjoinResult that,
  });

  Future<bool> crateApiJoinstrCoinjoinResultIsOk({
    required CoinjoinResult that,
  });

  Future<void> crateApiJoinstrInitApp();

  CoinjoinResult crateApiJoinstrInitiateCoinjoin({
    required DPoolConfig config,
    required DPeerConfig peer,
  });

  CoinjoinResult crateApiJoinstrJoinCoinjoin({
    required DPool pool,
    required DPeerConfig peer,
  });

  ListCoinsResult crateApiJoinstrListCoins({
    required String mnemonics,
    required String electrumUrl,
    required int electrumPort,
    required (int, int) range,
    required DNetwork network,
  });

  ListPoolsResult crateApiJoinstrListPools({
    required BigInt back,
    required BigInt timeout,
    required String relay,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DAddress;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DAddress;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DAddressPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DCoin;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DCoin;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DCoinPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DMnemonic;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DMnemonic;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DMnemonicPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DPeerConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DPeerConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DPeerConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DPool;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DPool;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DPoolPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<DAddress?> crateApiJoinstrDAddressFromString({required String value}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(value, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDAddressFromStringConstMeta,
        argValues: [value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDAddressFromStringConstMeta =>
      const TaskConstMeta(
        debugName: "DAddress_from_string",
        argNames: ["value"],
      );

  @override
  Future<double> crateApiJoinstrDCoinAmountBtc({required DCoin that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDCoinAmountBtcConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDCoinAmountBtcConstMeta =>
      const TaskConstMeta(debugName: "DCoin_amount_btc", argNames: ["that"]);

  @override
  Future<BigInt> crateApiJoinstrDCoinAmountSat({required DCoin that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDCoinAmountSatConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDCoinAmountSatConstMeta =>
      const TaskConstMeta(debugName: "DCoin_amount_sat", argNames: ["that"]);

  @override
  Future<String> crateApiJoinstrDCoinOutpoint({required DCoin that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDCoinOutpointConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDCoinOutpointConstMeta =>
      const TaskConstMeta(debugName: "DCoin_outpoint", argNames: ["that"]);

  @override
  Future<DMnemonic?> crateApiJoinstrDMnemonicFromString({
    required String value,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(value, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDMnemonicFromStringConstMeta,
        argValues: [value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDMnemonicFromStringConstMeta =>
      const TaskConstMeta(
        debugName: "DMnemonic_from_string",
        argNames: ["value"],
      );

  @override
  int crateApiJoinstrDPeerConfigAutoAccessorGetElectrumPort({
    required DPeerConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_16,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiJoinstrDPeerConfigAutoAccessorGetElectrumPortConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiJoinstrDPeerConfigAutoAccessorGetElectrumPortConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_get_electrum_port",
        argNames: ["that"],
      );

  @override
  String crateApiJoinstrDPeerConfigAutoAccessorGetElectrumUrl({
    required DPeerConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiJoinstrDPeerConfigAutoAccessorGetElectrumUrlConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiJoinstrDPeerConfigAutoAccessorGetElectrumUrlConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_get_electrum_url",
        argNames: ["that"],
      );

  @override
  DCoin crateApiJoinstrDPeerConfigAutoAccessorGetInput({
    required DPeerConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPeerConfigAutoAccessorGetInputConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPeerConfigAutoAccessorGetInputConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_get_input",
        argNames: ["that"],
      );

  @override
  DMnemonic crateApiJoinstrDPeerConfigAutoAccessorGetMnemonics({
    required DPeerConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPeerConfigAutoAccessorGetMnemonicsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiJoinstrDPeerConfigAutoAccessorGetMnemonicsConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_get_mnemonics",
        argNames: ["that"],
      );

  @override
  DAddress crateApiJoinstrDPeerConfigAutoAccessorGetOutput({
    required DPeerConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPeerConfigAutoAccessorGetOutputConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPeerConfigAutoAccessorGetOutputConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_get_output",
        argNames: ["that"],
      );

  @override
  String crateApiJoinstrDPeerConfigAutoAccessorGetRelay({
    required DPeerConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPeerConfigAutoAccessorGetRelayConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPeerConfigAutoAccessorGetRelayConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_get_relay",
        argNames: ["that"],
      );

  @override
  void crateApiJoinstrDPeerConfigAutoAccessorSetElectrumPort({
    required DPeerConfig that,
    required int electrumPort,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          sse_encode_u_16(electrumPort, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiJoinstrDPeerConfigAutoAccessorSetElectrumPortConstMeta,
        argValues: [that, electrumPort],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiJoinstrDPeerConfigAutoAccessorSetElectrumPortConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_set_electrum_port",
        argNames: ["that", "electrumPort"],
      );

  @override
  void crateApiJoinstrDPeerConfigAutoAccessorSetElectrumUrl({
    required DPeerConfig that,
    required String electrumUrl,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          sse_encode_String(electrumUrl, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiJoinstrDPeerConfigAutoAccessorSetElectrumUrlConstMeta,
        argValues: [that, electrumUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiJoinstrDPeerConfigAutoAccessorSetElectrumUrlConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_set_electrum_url",
        argNames: ["that", "electrumUrl"],
      );

  @override
  void crateApiJoinstrDPeerConfigAutoAccessorSetInput({
    required DPeerConfig that,
    required DCoin input,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
            input,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPeerConfigAutoAccessorSetInputConstMeta,
        argValues: [that, input],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPeerConfigAutoAccessorSetInputConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_set_input",
        argNames: ["that", "input"],
      );

  @override
  void crateApiJoinstrDPeerConfigAutoAccessorSetMnemonics({
    required DPeerConfig that,
    required DMnemonic mnemonics,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
            mnemonics,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPeerConfigAutoAccessorSetMnemonicsConstMeta,
        argValues: [that, mnemonics],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiJoinstrDPeerConfigAutoAccessorSetMnemonicsConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_set_mnemonics",
        argNames: ["that", "mnemonics"],
      );

  @override
  void crateApiJoinstrDPeerConfigAutoAccessorSetOutput({
    required DPeerConfig that,
    required DAddress output,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
            output,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPeerConfigAutoAccessorSetOutputConstMeta,
        argValues: [that, output],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPeerConfigAutoAccessorSetOutputConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_set_output",
        argNames: ["that", "output"],
      );

  @override
  void crateApiJoinstrDPeerConfigAutoAccessorSetRelay({
    required DPeerConfig that,
    required String relay,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            that,
            serializer,
          );
          sse_encode_String(relay, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPeerConfigAutoAccessorSetRelayConstMeta,
        argValues: [that, relay],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPeerConfigAutoAccessorSetRelayConstMeta =>
      const TaskConstMeta(
        debugName: "DPeerConfig_auto_accessor_set_relay",
        argNames: ["that", "relay"],
      );

  @override
  Future<double?> crateApiJoinstrDPoolDenominationBtc({required DPool that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPoolDenominationBtcConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPoolDenominationBtcConstMeta =>
      const TaskConstMeta(
        debugName: "DPool_denomination_btc",
        argNames: ["that"],
      );

  @override
  Future<BigInt?> crateApiJoinstrDPoolDenominationSat({required DPool that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPoolDenominationSatConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPoolDenominationSatConstMeta =>
      const TaskConstMeta(
        debugName: "DPool_denomination_sat",
        argNames: ["that"],
      );

  @override
  Future<int?> crateApiJoinstrDPoolFee({required DPool that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPoolFeeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPoolFeeConstMeta =>
      const TaskConstMeta(debugName: "DPool_fee", argNames: ["that"]);

  @override
  Future<BigInt?> crateApiJoinstrDPoolPeers({required DPool that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_usize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPoolPeersConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPoolPeersConstMeta =>
      const TaskConstMeta(debugName: "DPool_peers", argNames: ["that"]);

  @override
  Future<String?> crateApiJoinstrDPoolRelay({required DPool that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrDPoolRelayConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrDPoolRelayConstMeta =>
      const TaskConstMeta(debugName: "DPool_relay", argNames: ["that"]);

  @override
  Future<bool> crateApiJoinstrCoinjoinResultIsError({
    required CoinjoinResult that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_coinjoin_result(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrCoinjoinResultIsErrorConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrCoinjoinResultIsErrorConstMeta =>
      const TaskConstMeta(
        debugName: "coinjoin_result_is_error",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiJoinstrCoinjoinResultIsOk({
    required CoinjoinResult that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_coinjoin_result(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrCoinjoinResultIsOkConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrCoinjoinResultIsOkConstMeta =>
      const TaskConstMeta(
        debugName: "coinjoin_result_is_ok",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiJoinstrInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  CoinjoinResult crateApiJoinstrInitiateCoinjoin({
    required DPoolConfig config,
    required DPeerConfig peer,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_d_pool_config(config, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            peer,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_coinjoin_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrInitiateCoinjoinConstMeta,
        argValues: [config, peer],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrInitiateCoinjoinConstMeta =>
      const TaskConstMeta(
        debugName: "initiate_coinjoin",
        argNames: ["config", "peer"],
      );

  @override
  CoinjoinResult crateApiJoinstrJoinCoinjoin({
    required DPool pool,
    required DPeerConfig peer,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
            pool,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
            peer,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_coinjoin_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrJoinCoinjoinConstMeta,
        argValues: [pool, peer],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrJoinCoinjoinConstMeta =>
      const TaskConstMeta(
        debugName: "join_coinjoin",
        argNames: ["pool", "peer"],
      );

  @override
  ListCoinsResult crateApiJoinstrListCoins({
    required String mnemonics,
    required String electrumUrl,
    required int electrumPort,
    required (int, int) range,
    required DNetwork network,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(mnemonics, serializer);
          sse_encode_String(electrumUrl, serializer);
          sse_encode_u_16(electrumPort, serializer);
          sse_encode_box_autoadd_record_u_32_u_32(range, serializer);
          sse_encode_d_network(network, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_coins_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrListCoinsConstMeta,
        argValues: [mnemonics, electrumUrl, electrumPort, range, network],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrListCoinsConstMeta => const TaskConstMeta(
    debugName: "list_coins",
    argNames: ["mnemonics", "electrumUrl", "electrumPort", "range", "network"],
  );

  @override
  ListPoolsResult crateApiJoinstrListPools({
    required BigInt back,
    required BigInt timeout,
    required String relay,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_64(back, serializer);
          sse_encode_u_64(timeout, serializer);
          sse_encode_String(relay, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_pools_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJoinstrListPoolsConstMeta,
        argValues: [back, timeout, relay],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJoinstrListPoolsConstMeta => const TaskConstMeta(
    debugName: "list_pools",
    argNames: ["back", "timeout", "relay"],
  );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DAddress =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DAddress =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DCoin =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DCoin =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DMnemonic =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DMnemonic =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DPeerConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DPeerConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DPool =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DPool =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool;

  @protected
  DAddress
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DCoin
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DCoinImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DMnemonic
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DMnemonicImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DPeerConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DPeerConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DPool
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DPoolImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DPeerConfig
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DPeerConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DCoin
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DCoinImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DPeerConfig
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DPeerConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DPool
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DPoolImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DAddress
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DCoin
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DCoinImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DMnemonic
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DMnemonicImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DPeerConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DPeerConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DPool
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DPoolImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DAddress
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
      raw,
    );
  }

  @protected
  DMnemonic
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
      raw,
    );
  }

  @protected
  CoinjoinResult dco_decode_box_autoadd_coinjoin_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_coinjoin_result(raw);
  }

  @protected
  DPoolConfig dco_decode_box_autoadd_d_pool_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_d_pool_config(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  (int, int) dco_decode_box_autoadd_record_u_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (int, int);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  CoinjoinResult dco_decode_coinjoin_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CoinjoinResult(
      txid: dco_decode_String(arr[0]),
      error: dco_decode_String(arr[1]),
    );
  }

  @protected
  DNetwork dco_decode_d_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DNetwork.values[raw as int];
  }

  @protected
  DPoolConfig dco_decode_d_pool_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return DPoolConfig(
      denomination: dco_decode_f_64(arr[0]),
      fee: dco_decode_u_32(arr[1]),
      maxDuration: dco_decode_u_64(arr[2]),
      peers: dco_decode_usize(arr[3]),
      network: dco_decode_d_network(arr[4]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<DCoin>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin,
        )
        .toList();
  }

  @protected
  List<DPool>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool,
        )
        .toList();
  }

  @protected
  ListCoinsResult dco_decode_list_coins_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ListCoinsResult(
      coins:
          dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
            arr[0],
          ),
      error: dco_decode_String(arr[1]),
    );
  }

  @protected
  ListPoolsResult dco_decode_list_pools_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ListPoolsResult(
      pools:
          dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
            arr[0],
          ),
      error: dco_decode_String(arr[1]),
    );
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  DAddress?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
          raw,
        );
  }

  @protected
  DMnemonic?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
          raw,
        );
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  (int, int) dco_decode_record_u_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_u_32(arr[0]), dco_decode_u_32(arr[1]));
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  DAddress
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DAddressImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DCoin
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DCoinImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DMnemonic
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DMnemonicImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DPeerConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DPeerConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DPool
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DPoolImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DPeerConfig
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DPeerConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DCoin
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DCoinImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DPeerConfig
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DPeerConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DPool
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DPoolImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DAddress
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DAddressImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DCoin
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DCoinImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DMnemonic
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DMnemonicImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DPeerConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DPeerConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DPool
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DPoolImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DAddress
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
      deserializer,
    ));
  }

  @protected
  DMnemonic
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
      deserializer,
    ));
  }

  @protected
  CoinjoinResult sse_decode_box_autoadd_coinjoin_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_coinjoin_result(deserializer));
  }

  @protected
  DPoolConfig sse_decode_box_autoadd_d_pool_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_d_pool_config(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  (int, int) sse_decode_box_autoadd_record_u_32_u_32(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_u_32_u_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  CoinjoinResult sse_decode_coinjoin_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_error = sse_decode_String(deserializer);
    return CoinjoinResult(txid: var_txid, error: var_error);
  }

  @protected
  DNetwork sse_decode_d_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DNetwork.values[inner];
  }

  @protected
  DPoolConfig sse_decode_d_pool_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_denomination = sse_decode_f_64(deserializer);
    var var_fee = sse_decode_u_32(deserializer);
    var var_maxDuration = sse_decode_u_64(deserializer);
    var var_peers = sse_decode_usize(deserializer);
    var var_network = sse_decode_d_network(deserializer);
    return DPoolConfig(
      denomination: var_denomination,
      fee: var_fee,
      maxDuration: var_maxDuration,
      peers: var_peers,
      network: var_network,
    );
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<DCoin>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DCoin>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<DPool>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DPool>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  ListCoinsResult sse_decode_list_coins_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coins =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
          deserializer,
        );
    var var_error = sse_decode_String(deserializer);
    return ListCoinsResult(coins: var_coins, error: var_error);
  }

  @protected
  ListPoolsResult sse_decode_list_pools_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pools =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
          deserializer,
        );
    var var_error = sse_decode_String(deserializer);
    return ListPoolsResult(pools: var_pools, error: var_error);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DAddress?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  DMnemonic?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (int, int) sse_decode_record_u_32_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    DAddress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DAddressImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    DCoin self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DCoinImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    DMnemonic self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DMnemonicImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    DPeerConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DPeerConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    DPool self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DPoolImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    DPeerConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DPeerConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    DCoin self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DCoinImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    DPeerConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DPeerConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    DPool self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DPoolImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    DAddress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DAddressImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    DCoin self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DCoinImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    DMnemonic self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DMnemonicImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPeerConfig(
    DPeerConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DPeerConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    DPool self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DPoolImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    DAddress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    DMnemonic self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_coinjoin_result(
    CoinjoinResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_coinjoin_result(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_d_pool_config(
    DPoolConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_d_pool_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_u_32_u_32(
    (int, int) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_u_32_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_coinjoin_result(
    CoinjoinResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_String(self.error, serializer);
  }

  @protected
  void sse_encode_d_network(DNetwork self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_d_pool_config(DPoolConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.denomination, serializer);
    sse_encode_u_32(self.fee, serializer);
    sse_encode_u_64(self.maxDuration, serializer);
    sse_encode_usize(self.peers, serializer);
    sse_encode_d_network(self.network, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
    List<DCoin> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
    List<DPool> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_coins_result(
    ListCoinsResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDCoin(
      self.coins,
      serializer,
    );
    sse_encode_String(self.error, serializer);
  }

  @protected
  void sse_encode_list_pools_result(
    ListPoolsResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDPool(
      self.pools,
      serializer,
    );
    sse_encode_String(self.error, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
    DAddress? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDAddress(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
    DMnemonic? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDMnemonic(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
    BigInt? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_record_u_32_u_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class DAddressImpl extends RustOpaque implements DAddress {
  // Not to be used by end users
  DAddressImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DAddressImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DAddress,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DAddress,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DAddressPtr,
  );
}

@sealed
class DCoinImpl extends RustOpaque implements DCoin {
  // Not to be used by end users
  DCoinImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DCoinImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DCoin,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DCoin,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DCoinPtr,
  );

  Future<double> amountBtc() =>
      RustLib.instance.api.crateApiJoinstrDCoinAmountBtc(that: this);

  Future<BigInt> amountSat() =>
      RustLib.instance.api.crateApiJoinstrDCoinAmountSat(that: this);

  Future<String> outpoint() =>
      RustLib.instance.api.crateApiJoinstrDCoinOutpoint(that: this);
}

@sealed
class DMnemonicImpl extends RustOpaque implements DMnemonic {
  // Not to be used by end users
  DMnemonicImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DMnemonicImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DMnemonic,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DMnemonic,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DMnemonicPtr,
  );
}

@sealed
class DPeerConfigImpl extends RustOpaque implements DPeerConfig {
  // Not to be used by end users
  DPeerConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DPeerConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DPeerConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DPeerConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DPeerConfigPtr,
  );

  int get electrumPort => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorGetElectrumPort(that: this);

  String get electrumUrl => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorGetElectrumUrl(that: this);

  DCoin get input => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorGetInput(that: this);

  DMnemonic get mnemonics => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorGetMnemonics(that: this);

  DAddress get output => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorGetOutput(that: this);

  String get relay => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorGetRelay(that: this);

  set electrumPort(int electrumPort) => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorSetElectrumPort(
        that: this,
        electrumPort: electrumPort,
      );

  set electrumUrl(String electrumUrl) =>
      RustLib.instance.api.crateApiJoinstrDPeerConfigAutoAccessorSetElectrumUrl(
        that: this,
        electrumUrl: electrumUrl,
      );

  set input(DCoin input) => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorSetInput(that: this, input: input);

  set mnemonics(DMnemonic mnemonics) =>
      RustLib.instance.api.crateApiJoinstrDPeerConfigAutoAccessorSetMnemonics(
        that: this,
        mnemonics: mnemonics,
      );

  set output(DAddress output) =>
      RustLib.instance.api.crateApiJoinstrDPeerConfigAutoAccessorSetOutput(
        that: this,
        output: output,
      );

  set relay(String relay) => RustLib.instance.api
      .crateApiJoinstrDPeerConfigAutoAccessorSetRelay(that: this, relay: relay);
}

@sealed
class DPoolImpl extends RustOpaque implements DPool {
  // Not to be used by end users
  DPoolImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DPoolImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DPool,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DPool,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DPoolPtr,
  );

  Future<double?> denominationBtc() =>
      RustLib.instance.api.crateApiJoinstrDPoolDenominationBtc(that: this);

  Future<BigInt?> denominationSat() =>
      RustLib.instance.api.crateApiJoinstrDPoolDenominationSat(that: this);

  Future<int?> fee() =>
      RustLib.instance.api.crateApiJoinstrDPoolFee(that: this);

  Future<BigInt?> peers() =>
      RustLib.instance.api.crateApiJoinstrDPoolPeers(that: this);

  Future<String?> relay() =>
      RustLib.instance.api.crateApiJoinstrDPoolRelay(that: this);
}
